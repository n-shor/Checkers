@startuml
' https://plantuml.com/class-diagram

+class AlarmReceiver extends BroadcastReceiver
{
    +public static final
    +public static final String CHANNEL_NAME
    +public void onReceive(Context context, Intent intent)
    -private void makeNotification(Context context)
}

+class AlarmScheduler
{
    +public static void scheduleMidnightAlarm(Context context, Activity activity)
}

+class Board
{
    +public static final boolean WHITE
    +public static final boolean BLACK
    +public static final int BOARD_SIZE
    -private final Piece[][] state
    -private boolean turn
    -private int movesSinceCaptureOrKing
    -private int lastMoveX
    -private int lastMoveY
    +public Board()
    +public boolean move(int xSrc, int ySrc, int xDst, int yDst)
    -private boolean canMove(int x, int y)
    +public String getWinner()
    +public String checkGameStatus()
    +public Piece[][] getState()
    +public boolean isValidMove(int xSrc, int ySrc, int xDst, int yDst)
    -private void performPieceCapture(int xSrc, int ySrc, int xDst, int yDst)
    -private void performKingCapture(int xSrc, int ySrc, int xDst, int yDst)
    -private boolean isPathClear(int xSrc, int ySrc, int xDst, int yDst)
    -private boolean hasOpponentPieceInBetween(int xSrc, int ySrc, int xDst, int yDst)
    -private boolean pieceHasMandatoryCapture(int x, int y)
    -private boolean kingHasMandatoryCapture(int x, int y)
    -private boolean playerHasMandatoryCapture()
    +public void setTurn(boolean turn)
    +public boolean getTurn()
    +public int getLastMoveX()
    +public void setLastMoveX(int lastMoveX)
    +public int getLastMoveY()
    +public void setLastMoveY(int lastMoveY)
    +public int getMovesSinceCaptureOrKing()
    +public void setMovesSinceCaptureOrKing(int movesSinceCaptureOrKing)

}

+class CheckersAdapter extends BaseAdapter
{
    -private final Context context
    -private Piece[][] boardState
    -private final boolean color
    +public CheckersAdapter(Context context, Piece[][] boardState, boolean color)
    +public int getCount()
    +public Object getItem(int position)
    +public long getItemId(int position)
    +public View getView(int position, View convertView, ViewGroup parent)
    +public void updateGameState(Piece[][] newBoardState)
}

+class Game
{
    +public static final String WHITE_STRING
    +public static final String BLACK_STRING
    +public static final String DRAW_STRING
    +public static final String NONE_STRING
    #protected Board board
    #protected boolean isActive
    +public Game()
    +public Board getBoard()
    +public boolean makeMove(int xSrc, int ySrc, int xDst, int yDst)
    +public boolean isActive()
}

+class OnlineGame extends Game
{
    -private final String whiteId
    -private final String blackId
    -private final String gameId
    -private DatabaseReference gameRef
    -private final String playerColor
    -private int playerMoves
    -private CheckersAdapter adapter
    +public OnlineGame(String gameId, String playerColor, String whiteId, String blackId)
    -private void setupFirebase(String gameId)
    +public boolean makeMove(int xSrc, int ySrc, int xDst, int yDst)
    -private boolean isValidPlayerMove(int xSrc, int ySrc)
    -private void updateGameStateInFirebase()
    -private void updateLocalBoardState(String boardState)
    -private String serializeBoardState()
    +public void deserializeBoardState(String boardState)
    -private Statistics.Outcomes determineOutcome()
    +public void setAdapter(CheckersAdapter adapter)
    +public void finishGame()
}

+class Piece
{
    -private final boolean color
    -private boolean isKing
    +public Piece(boolean color)
    +public Piece(boolean color, boolean isKing)
    +public boolean isBlack()
    +public int getPictureID()
    +public boolean isKing()
    +public void setKing(boolean isKing)
}

+class Player
{
    -private String username
    -private String email
    -private String hashedPassword
    -private Statistics stats
    -private String lastWinDate
    +public Player()
    +public Player(String username, String email, String hashedPassword)
    +public String getUsername()
    +public void setUsername(String username)
    +public String getEmail()
    +public void setEmail(String email)
    +public String getHashedPassword()
    +public void setHashedPassword(String hashedPassword)
    +public Statistics getStats()
    +public void setStats(Statistics stats)
    +public String getLastWinDate()
    +public void setLastWinDate(String lastWinDate)
}

+class Room
{
    -private String roomId
    -private String roomOwnerId
    -private String player2Id
    -private boolean isGameOngoing
    -private String roomName
    +public Room()
    +public Room(String roomId, String roomOwnerId, String roomName)
    +public String getRoomId()
    +public String getRoomOwnerId()
    +public String getPlayer2Id()
    +public void setPlayer2Id(String player2Id)
    +public boolean isGameOngoing()
    +public void setGameOngoing(boolean gameOngoing)
    +public boolean canJoin()
    +public String getRoomName()
}

+class RoomAdapter extends ArrayAdapter
{
    +public RoomAdapter(Context context, List<Room> rooms)
    +public View getView(int position, View convertView, ViewGroup parent)
}

+class Statistics
{
    +public enum Outcomes
    -private int elo
    -private int wins
    -private int losses
    -private int draws
    -private int averageMovesPerGame
    -private int topMoves
    +public Statistics()
    +public Statistics(int wins, int losses, int draws, int averageMovesPerGame, int topMoves)
    +public void updateStatistics(Outcomes outcome, int moves, boolean hasDailyBonus, int opponentElo)
    +public int getWins()
    +public void setWins(int wins)
    +public int getLosses()
    +public void setLosses(int losses)
    +public int getDraws()
    +public void setDraws(int draws)
    +public int getAverageMovesPerGame()
    +public void setAverageMovesPerGame(int averageMovesPerGame)
    +public int getTopMoves()
    +public void setTopMoves(int topMoves)
    +public int getElo()
    +public void setElo(int elo)
    -private static float winProbability(float rating1, float rating2)
}

Game *-- Board
Game --> CheckersAdapter : setAdapter
OnlineGame *-- CheckersAdapter
Room *-- Player
RoomAdapter <-- Room : setAdapter
AlarmScheduler --> AlarmReceiver : scheduleMidnightAlarm
Board *-- Piece
CheckersAdapter *-- Piece
Player *-- Statistics

@enduml
